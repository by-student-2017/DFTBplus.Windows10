#ifndef _NEGF_H
#define _NEGF_H

//*************************************************************************** 
//*
//*  C++ bindings for LibNEGF 
//*
//*  Generated by bind_fortran (DO NOT EDIT MANUALLY)
//*
//***************************************************************************
//* Notes:
//*   o) these bindings need the "fortran.h" header file
//*   o) you should call only the f77_* functions from C++ in order to make
//*      sure, that your code does not depend on the naming convention of
//*      the different compilers (e.g. trailing underscores)
//***************************************************************************

#include "fortran.h"

// Some defintions for constants used by Uptight
const int NEGF_SC = 100;
const int NEGF_MC = 200;
const int NEGF_LC = 500;
const int NEGF_HSIZE = 4;
const char NEGF_PADCHAR = ' ';



extern "C" void negf_gethandlersize (int&);

// Corresponding F77 arguments for f77_negf_gethandlersize:
// integer(c_int), intent(out), intent(out) :: handlerSize
inline void f77_negf_gethandlersize (int& handlerSize)
{
  negf_gethandlersize (handlerSize);
}


extern "C" void negf_init_session (int*);

// Corresponding F77 arguments for f77_negf_init_session:
// integer(c_int), intent(out) :: handler(DAC_handlerSize)
inline void f77_negf_init_session (int* handler)
{
  negf_init_session (handler);
}


extern "C" void negf_get_version (int*);

// Corresponding F77 arguments for f77_negf_get_version:
// integer(c_int), intent(inout) :: handler(DAC_handlerSize)
inline void f77_negf_get_version (int* handler)
{
  negf_get_version (handler);
}


extern "C" void negf_init (int*);

// Corresponding F77 arguments for f77_negf_init:
// integer(c_int), intent(inout), intent(inout) :: handler(DAC_handlerSize)
inline void f77_negf_init (int* handler)
{
  negf_init (handler);
}


extern "C" void negf_init_structure (int*, int&, int*, int*, int*, int&, int*, 
    int*);

// Corresponding F77 arguments for f77_negf_init_structure:
// integer(c_int), intent(inout), intent(inout) :: handler(DAC_handlerSize)
// integer(c_int), intent(in), value, intent(inout) :: ncont
// integer(c_int), intent(in), intent(inout) :: surfstart(*)
// integer(c_int), intent(in), intent(inout) :: surfend(*)
// integer(c_int), intent(in), intent(inout) :: contend(*)
// integer(c_int), intent(in), value, intent(inout) :: npl
// integer(c_int), intent(in), intent(inout) :: plend(*)
// integer(c_int), intent(in), intent(inout) :: cblk(*)
inline void f77_negf_init_structure (int* handler, int& ncont, int* surfstart, 
    int* surfend, int* contend, int& npl, int* plend, int* cblk)
{
  negf_init_structure (handler, ncont, surfstart, surfend, contend, npl, plend, 
      cblk);
}


extern "C" void negf_get_pls (int const*, int const&, int const&, int const*, 
    int const*, int const&);

// Corresponding F77 arguments for f77_negf_get_pls:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(out), intent(in) :: npl
// integer(c_int), intent(out), intent(in) :: ncont
// integer(c_int), intent(out), intent(in) :: plend(*)
// integer(c_int), intent(out), intent(in) :: cblk(*)
// integer(c_int), intent(in), value, intent(in) :: copy
inline void f77_negf_get_pls (int const* handler, int const& npl, int const& 
    ncont, int const* plend, int const* cblk, int const& copy)
{
  negf_get_pls (handler, npl, ncont, plend, cblk, copy);
}


extern "C" void negf_init_contacts (int*, int&);

// Corresponding F77 arguments for f77_negf_init_contacts:
// integer(c_int), intent(inout), intent(inout) :: handler(DAC_handlerSize)
// integer(c_int), intent(in), value, intent(inout) :: ncont
inline void f77_negf_init_contacts (int* handler, int& ncont)
{
  negf_init_contacts (handler, ncont);
}


extern "C" void negf_set_params (int*, struct lnparams&);

// Corresponding F77 arguments for f77_negf_set_params:
// integer(c_int), intent(inout), intent(inout) :: handler(DAC_handlerSize)
// type(lnparams), intent(in), intent(inout) :: params
inline void f77_negf_set_params (int* handler, struct lnparams& params)
{
  negf_set_params (handler, params);
}


extern "C" void negf_get_params (int*, struct lnparams&);

// Corresponding F77 arguments for f77_negf_get_params:
// integer(c_int), intent(inout), intent(inout) :: handler(DAC_handlerSize)
// type(lnparams), intent(inout), intent(inout) :: params
inline void f77_negf_get_params (int* handler, struct lnparams& params)
{
  negf_get_params (handler, params);
}


extern "C" void negf_set_h (int const*, int const&, f77_complex const*, int 
    const*, int const*);

// Corresponding F77 arguments for f77_negf_set_h:
// integer, intent(in) :: handler(DAC_handlerSize)
// integer, intent(in), value, intent(in) :: nrow
// complex(dp), intent(in) :: A(*)
// integer, intent(in) :: JA(*)
// integer, intent(in) :: IA(*)
inline void f77_negf_set_h (int const* handler, int const& nrow, f77_complex 
    const* A, int const* JA, int const* IA)
{
  negf_set_h (handler, nrow, A, JA, IA);
}


extern "C" void negf_set_mpi_fcomm (int const*, int const&);

// Corresponding F77 arguments for f77_negf_set_mpi_fcomm:
// integer, intent(in) :: handler(DAC_handlerSize)
// integer, intent(in), value, intent(in) :: comm
inline void f77_negf_set_mpi_fcomm (int const* handler, int const& comm)
{
  negf_set_mpi_fcomm (handler, comm);
}


extern "C" void negf_set_s (int const*, int&, f77_complex*, int*, int*);

// Corresponding F77 arguments for f77_negf_set_s:
// integer, intent(in) :: handler(DAC_handlerSize)
// integer, intent(in), value, intent(out) :: nrow
// complex(dp), intent(out) :: A(*)
// integer, intent(out) :: JA(*)
// integer, intent(out) :: IA(*)
inline void f77_negf_set_s (int const* handler, int& nrow, f77_complex* A, int* 
    JA, int* IA)
{
  negf_set_s (handler, nrow, A, JA, IA);
}


extern "C" void negf_set_s_cp (int const*, int&, double*, double*, int*, int*);

// Corresponding F77 arguments for f77_negf_set_s_cp:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(in), value, intent(out) :: nrow
// real(c_double), intent(out) :: a_re(*)
// real(c_double), intent(out) :: a_im(*)
// integer(c_int), intent(out) :: ja(*)
// integer(c_int), intent(out) :: ia(*)
inline void f77_negf_set_s_cp (int const* handler, int& nrow, double* a_re, 
    double* a_im, int* ja, int* ia)
{
  negf_set_s_cp (handler, nrow, a_re, a_im, ja, ia);
}


extern "C" void negf_set_h_cp (int const*, int&, double*, double*, int*, int*);

// Corresponding F77 arguments for f77_negf_set_h_cp:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(in), value, intent(out) :: nrow
// real(c_double), intent(out) :: a_re(*)
// real(c_double), intent(out) :: a_im(*)
// integer(c_int), intent(out) :: ja(*)
// integer(c_int), intent(out) :: ia(*)
inline void f77_negf_set_h_cp (int const* handler, int& nrow, double* a_re, 
    double* a_im, int* ja, int* ia)
{
  negf_set_h_cp (handler, nrow, a_re, a_im, ja, ia);
}


extern "C" void negf_set_s_id (int const*, int&);

// Corresponding F77 arguments for f77_negf_set_s_id:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(in), value, intent(out) :: nrow
inline void f77_negf_set_s_id (int const* handler, int& nrow)
{
  negf_set_s_id (handler, nrow);
}


extern "C" void negf_print_mat (int const*);

// Corresponding F77 arguments for f77_negf_print_mat:
// integer(c_int), intent(in), intent(in) :: handler(DAC_handlerSize)
inline void f77_negf_print_mat (int const* handler)
{
  negf_print_mat (handler);
}


extern "C" void negf_read_input (int const*);

// Corresponding F77 arguments for f77_negf_read_input:
// integer(c_int), intent(in), intent(in) :: handler(DAC_handlerSize)
inline void f77_negf_read_input (int const* handler)
{
  negf_read_input (handler);
}


extern "C" void negf_read_hs (int const*, char const*, char const*, int const&);

// Corresponding F77 arguments for f77_negf_read_hs:
// integer(c_int), intent(in), intent(in) :: handler(DAC_handlerSize)
// character(kind=c_char), intent(in), intent(in) :: real_path(*)
// character(kind=c_char), intent(in), intent(in) :: imag_path(*)
// integer(c_int), intent(in), value, intent(in) :: target_matrix
inline void f77_negf_read_hs (int const* handler, char const* real_path, char 
    const* imag_path, int const& target_matrix)
{
  negf_read_hs (handler, real_path, imag_path, target_matrix);
}


extern "C" void negf_destruct_session (int const*);

// Corresponding F77 arguments for f77_negf_destruct_session:
// integer(c_int), intent(in), intent(in) :: handler(DAC_handlerSize)
inline void f77_negf_destruct_session (int const* handler)
{
  negf_destruct_session (handler);
}


extern "C" void negf_destruct_libnegf (int const*);

// Corresponding F77 arguments for f77_negf_destruct_libnegf:
// integer(c_int), intent(in), intent(in) :: handler(DAC_handlerSize)
inline void f77_negf_destruct_libnegf (int const* handler)
{
  negf_destruct_libnegf (handler);
}


extern "C" void negf_set_verbosity (int const*, int const&);

// Corresponding F77 arguments for f77_negf_set_verbosity:
// integer(c_int), intent(in), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(in), intent(in) :: verbose_lev
inline void f77_negf_set_verbosity (int const* handler, int const& verbose_lev)
{
  negf_set_verbosity (handler, verbose_lev);
}


extern "C" void negf_solve_landauer (int const*);

// Corresponding F77 arguments for f77_negf_solve_landauer:
// integer(c_int), intent(in), intent(in) :: handler(DAC_handlerSize)
inline void f77_negf_solve_landauer (int const* handler)
{
  negf_solve_landauer (handler);
}


extern "C" void negf_calculate_dephasing_transmission (int const*);

// Corresponding F77 arguments for f77_negf_calculate_dephasing_transmission:
// integer(c_int), intent(in), intent(in) :: handler(DAC_handlerSize)
inline void f77_negf_calculate_dephasing_transmission (int const* handler)
{
  negf_calculate_dephasing_transmission (handler);
}


extern "C" void negf_solve_density_dft (int const*);

// Corresponding F77 arguments for f77_negf_solve_density_dft:
// integer(c_int), intent(in), intent(in) :: handler(DAC_handlerSize)
inline void f77_negf_solve_density_dft (int const* handler)
{
  negf_solve_density_dft (handler);
}


extern "C" void negf_get_energies (int const*, int const&, double const*, 
    double const*, int const&);

// Corresponding F77 arguments for f77_negf_get_energies:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(out), intent(in) :: npoints
// real(c_double), intent(out), intent(in) :: re_en(*)
// real(c_double), intent(out), intent(in) :: im_en(*)
// integer(c_int), intent(in), value, intent(in) :: copy
inline void f77_negf_get_energies (int const* handler, int const& npoints, 
    double const* re_en, double const* im_en, int const& copy)
{
  negf_get_energies (handler, npoints, re_en, im_en, copy);
}


extern "C" void negf_get_dm (int const*, int const&, int const&, int const*, 
    int const*, double const*, double const*, int const&);

// Corresponding F77 arguments for f77_negf_get_dm:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(out), intent(in) :: nnz
// integer(c_int), intent(out), intent(in) :: nrow
// integer(c_int), intent(out), intent(in) :: rowpnt(*)
// integer(c_int), intent(out), intent(in) :: colind(*)
// real(c_double), intent(out), intent(in) :: re_nzval(*)
// real(c_double), intent(out), intent(in) :: im_nzval(*)
// integer(c_int), intent(in), value, intent(in) :: copy
inline void f77_negf_get_dm (int const* handler, int const& nnz, int const& 
    nrow, int const* rowpnt, int const* colind, double const* re_nzval, double 
    const* im_nzval, int const& copy)
{
  negf_get_dm (handler, nnz, nrow, rowpnt, colind, re_nzval, im_nzval, copy);
}


extern "C" void negf_get_currents (int const*, int const&, double const*, int 
    const&);

// Corresponding F77 arguments for f77_negf_get_currents:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(out), intent(in) :: npairs
// real(c_double), intent(out), intent(in) :: currents(*)
// integer(c_int), intent(in), value, intent(in) :: copy
inline void f77_negf_get_currents (int const* handler, int const& npairs, 
    double const* currents, int const& copy)
{
  negf_get_currents (handler, npairs, currents, copy);
}


extern "C" void negf_associate_transmission (int const*, int*, double **);

// Corresponding F77 arguments for f77_negf_associate_transmission:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(out), intent(out) :: tr_shape(2)
// type(c_ptr), intent(out), intent(out) :: tr_pointer
inline void f77_negf_associate_transmission (int const* handler, int* tr_shape, 
    double ** tr_pointer)
{
  negf_associate_transmission (handler, tr_shape, tr_pointer);
}


extern "C" void negf_associate_energy_current (int const*, int*, double **);

// Corresponding F77 arguments for f77_negf_associate_energy_current:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(out), intent(out) :: currents_shape(2)
// type(c_ptr), intent(out), intent(out) :: currents_pointer
inline void f77_negf_associate_energy_current (int const* handler, int* 
    currents_shape, double ** currents_pointer)
{
  negf_associate_energy_current (handler, currents_shape, currents_pointer);
}


extern "C" void negf_associate_ldos (int const*, int*, double **);

// Corresponding F77 arguments for f77_negf_associate_ldos:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(out), intent(out) :: ldos_shape(2)
// type(c_ptr), intent(out), intent(out) :: ldos_pointer
inline void f77_negf_associate_ldos (int const* handler, int* ldos_shape, 
    double ** ldos_pointer)
{
  negf_associate_ldos (handler, ldos_shape, ldos_pointer);
}


extern "C" void negf_set_ldos_intervals (int const*, int const&, int const*, 
    int const*);

// Corresponding F77 arguments for f77_negf_set_ldos_intervals:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(in), value, intent(in) :: nldos
// integer(c_int), intent(in), intent(in) :: istart(*)
// integer(c_int), intent(in), intent(in) :: iend(*)
inline void f77_negf_set_ldos_intervals (int const* handler, int const& nldos, 
    int const* istart, int const* iend)
{
  negf_set_ldos_intervals (handler, nldos, istart, iend);
}


extern "C" void negf_init_ldos (int const*, int const&);

// Corresponding F77 arguments for f77_negf_init_ldos:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(in), value, intent(in) :: nldos
inline void f77_negf_init_ldos (int const* handler, int const& nldos)
{
  negf_init_ldos (handler, nldos);
}


extern "C" void negf_set_ldos_indexes (int const*, int const&, int const&, int 
    const*);

// Corresponding F77 arguments for f77_negf_set_ldos_indexes:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// integer(c_int), intent(in), value, intent(in) :: ildos
// integer(c_int), intent(in), intent(in) :: idx_size
// integer(c_int), intent(in), intent(in) :: idx(*)
inline void f77_negf_set_ldos_indexes (int const* handler, int const& ildos, 
    int const& idx_size, int const* idx)
{
  negf_set_ldos_indexes (handler, ildos, idx_size, idx);
}


extern "C" void negf_write_tunneling_and_dos (int const*);

// Corresponding F77 arguments for f77_negf_write_tunneling_and_dos:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
inline void f77_negf_write_tunneling_and_dos (int const* handler)
{
  negf_write_tunneling_and_dos (handler);
}


extern "C" void negf_set_outer (int const*, int const&);

// Corresponding F77 arguments for f77_negf_set_outer:
// integer, intent(in) :: handler(DAC_handlerSize)
// integer, intent(in) :: outer
inline void f77_negf_set_outer (int const* handler, int const& outer)
{
  negf_set_outer (handler, outer);
}


extern "C" void negf_set_kpoint (int const*, int const&);

// Corresponding F77 arguments for f77_negf_set_kpoint:
// integer, intent(in) :: handler(DAC_handlerSize)
// integer, intent(in) :: kpoint
inline void f77_negf_set_kpoint (int const* handler, int const& kpoint)
{
  negf_set_kpoint (handler, kpoint);
}


extern "C" void negf_set_reference (int const*, int const&);

// Corresponding F77 arguments for f77_negf_set_reference:
// integer, intent(in) :: handler(DAC_handlerSize)
// integer, intent(in) :: minmax
inline void f77_negf_set_reference (int const* handler, int const& minmax)
{
  negf_set_reference (handler, minmax);
}


extern "C" void negf_write_partition (int const*);

// Corresponding F77 arguments for f77_negf_write_partition:
// integer, intent(in) :: handler(DAC_handlerSize)
inline void f77_negf_write_partition (int const* handler)
{
  negf_write_partition (handler);
}


extern "C" void negf_current (int const*, f77_double&, f77_char const&, 
    f77_char const&);

// Corresponding F77 arguments for f77_negf_current:
// integer, intent(in) :: handler(DAC_handlerSize)
// real(dp), intent(inout) :: current
// character(SST), intent(in) :: unitsOfH
// character(SST), intent(in) :: unitsOfJ
inline void f77_negf_current (int const* handler, f77_double& current, f77_char 
    const& unitsOfH, f77_char const& unitsOfJ)
{
  negf_current (handler, current, unitsOfH, unitsOfJ);
}


extern "C" void negf_print_tnegf (int const*);

// Corresponding F77 arguments for f77_negf_print_tnegf:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
inline void f77_negf_print_tnegf (int const* handler)
{
  negf_print_tnegf (handler);
}


extern "C" void negf_set_elph_dephasing (int const*, double const*, int const&, 
    int const*, int const&, int const&, int const&);

// Corresponding F77 arguments for f77_negf_set_elph_dephasing:
// integer(c_int), intent(in) :: handler(DAC_handlerSize)
// real(c_double), intent(in), intent(in) :: coupling(*)
// integer(c_int), intent(in), value, intent(in) :: coupling_size
// integer(c_int), intent(in), intent(in) :: orbsperatom(*)
// integer(c_int), intent(in), value, intent(in) :: orbsperatom_size
// integer(c_int), intent(in), value, intent(in) :: niter
// integer(c_int), intent(in), value, intent(in) :: model
inline void f77_negf_set_elph_dephasing (int const* handler, double const* 
    coupling, int const& coupling_size, int const* orbsperatom, int const& 
    orbsperatom_size, int const& niter, int const& model)
{
  negf_set_elph_dephasing (handler, coupling, coupling_size, orbsperatom, 
      orbsperatom_size, niter, model);
}


#endif

